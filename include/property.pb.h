// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: property.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_property_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_property_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_property_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_property_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_property_2eproto;
class CommandMessage;
struct CommandMessageDefaultTypeInternal;
extern CommandMessageDefaultTypeInternal _CommandMessage_default_instance_;
class ResponseMessage;
struct ResponseMessageDefaultTypeInternal;
extern ResponseMessageDefaultTypeInternal _ResponseMessage_default_instance_;
class TriggerMessage;
struct TriggerMessageDefaultTypeInternal;
extern TriggerMessageDefaultTypeInternal _TriggerMessage_default_instance_;
class VariableMessage;
struct VariableMessageDefaultTypeInternal;
extern VariableMessageDefaultTypeInternal _VariableMessage_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum CommandMessage_CommandType : int {
  CommandMessage_CommandType_GET_VARIABLE = 0,
  CommandMessage_CommandType_SET_VARIABLE = 1,
  CommandMessage_CommandType_GET_ALL_VARIABLES = 2,
  CommandMessage_CommandType_GET_ALL_TRIGGERS = 3,
  CommandMessage_CommandType_EXECUTE_TRIGGER = 4,
  CommandMessage_CommandType_CommandMessage_CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CommandMessage_CommandType_CommandMessage_CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CommandMessage_CommandType_IsValid(int value);
extern const uint32_t CommandMessage_CommandType_internal_data_[];
constexpr CommandMessage_CommandType CommandMessage_CommandType_CommandType_MIN = static_cast<CommandMessage_CommandType>(0);
constexpr CommandMessage_CommandType CommandMessage_CommandType_CommandType_MAX = static_cast<CommandMessage_CommandType>(4);
constexpr int CommandMessage_CommandType_CommandType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
CommandMessage_CommandType_descriptor();
template <typename T>
const std::string& CommandMessage_CommandType_Name(T value) {
  static_assert(std::is_same<T, CommandMessage_CommandType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CommandType_Name().");
  return CommandMessage_CommandType_Name(static_cast<CommandMessage_CommandType>(value));
}
template <>
inline const std::string& CommandMessage_CommandType_Name(CommandMessage_CommandType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CommandMessage_CommandType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool CommandMessage_CommandType_Parse(absl::string_view name, CommandMessage_CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandMessage_CommandType>(
      CommandMessage_CommandType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class VariableMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VariableMessage) */ {
 public:
  inline VariableMessage() : VariableMessage(nullptr) {}
  ~VariableMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VariableMessage(::google::protobuf::internal::ConstantInitialized);

  inline VariableMessage(const VariableMessage& from)
      : VariableMessage(nullptr, from) {}
  VariableMessage(VariableMessage&& from) noexcept
    : VariableMessage() {
    *this = ::std::move(from);
  }

  inline VariableMessage& operator=(const VariableMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableMessage& operator=(VariableMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VariableMessage& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kStringValue = 3,
    kNumericValue = 4,
    kBoolValue = 5,
    VALUE_NOT_SET = 0,
  };

  static inline const VariableMessage* internal_default_instance() {
    return reinterpret_cast<const VariableMessage*>(
               &_VariableMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VariableMessage& a, VariableMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VariableMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VariableMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VariableMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VariableMessage& from) {
    VariableMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VariableMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "VariableMessage";
  }
  protected:
  explicit VariableMessage(::google::protobuf::Arena* arena);
  VariableMessage(::google::protobuf::Arena* arena, const VariableMessage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kReadOnlyFieldNumber = 6,
    kStringValueFieldNumber = 3,
    kNumericValueFieldNumber = 4,
    kBoolValueFieldNumber = 5,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bool read_only = 6;
  void clear_read_only() ;
  bool read_only() const;
  void set_read_only(bool value);

  private:
  bool _internal_read_only() const;
  void _internal_set_read_only(bool value);

  public:
  // string string_value = 3;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* value);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // double numeric_value = 4;
  bool has_numeric_value() const;
  void clear_numeric_value() ;
  double numeric_value() const;
  void set_numeric_value(double value);

  private:
  double _internal_numeric_value() const;
  void _internal_set_numeric_value(double value);

  public:
  // bool bool_value = 5;
  bool has_bool_value() const;
  void clear_bool_value() ;
  bool bool_value() const;
  void set_bool_value(bool value);

  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:VariableMessage)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_numeric_value();
  void set_has_bool_value();

  inline bool has_value() const;
  inline void clear_has_value();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 5, 0,
      40, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    bool read_only_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr string_value_;
      double numeric_value_;
      bool bool_value_;
    } value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_property_2eproto;
};// -------------------------------------------------------------------

class TriggerMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TriggerMessage) */ {
 public:
  inline TriggerMessage() : TriggerMessage(nullptr) {}
  ~TriggerMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TriggerMessage(::google::protobuf::internal::ConstantInitialized);

  inline TriggerMessage(const TriggerMessage& from)
      : TriggerMessage(nullptr, from) {}
  TriggerMessage(TriggerMessage&& from) noexcept
    : TriggerMessage() {
    *this = ::std::move(from);
  }

  inline TriggerMessage& operator=(const TriggerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TriggerMessage& operator=(TriggerMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TriggerMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TriggerMessage* internal_default_instance() {
    return reinterpret_cast<const TriggerMessage*>(
               &_TriggerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TriggerMessage& a, TriggerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TriggerMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TriggerMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TriggerMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TriggerMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TriggerMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TriggerMessage& from) {
    TriggerMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TriggerMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "TriggerMessage";
  }
  protected:
  explicit TriggerMessage(::google::protobuf::Arena* arena);
  TriggerMessage(::google::protobuf::Arena* arena, const TriggerMessage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:TriggerMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      27, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_property_2eproto;
};// -------------------------------------------------------------------

class ResponseMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResponseMessage) */ {
 public:
  inline ResponseMessage() : ResponseMessage(nullptr) {}
  ~ResponseMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseMessage(::google::protobuf::internal::ConstantInitialized);

  inline ResponseMessage(const ResponseMessage& from)
      : ResponseMessage(nullptr, from) {}
  ResponseMessage(ResponseMessage&& from) noexcept
    : ResponseMessage() {
    *this = ::std::move(from);
  }

  inline ResponseMessage& operator=(const ResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseMessage& operator=(ResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseMessage* internal_default_instance() {
    return reinterpret_cast<const ResponseMessage*>(
               &_ResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResponseMessage& a, ResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResponseMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ResponseMessage& from) {
    ResponseMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ResponseMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ResponseMessage";
  }
  protected:
  explicit ResponseMessage(::google::protobuf::Arena* arena);
  ResponseMessage(::google::protobuf::Arena* arena, const ResponseMessage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 6,
    kTriggersFieldNumber = 7,
    kErrorMessageFieldNumber = 3,
    kMessageFieldNumber = 4,
    kVariableFieldNumber = 5,
    kCommandIdFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // repeated .VariableMessage variables = 6;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  ::VariableMessage* mutable_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::VariableMessage >*
      mutable_variables();
  private:
  const ::google::protobuf::RepeatedPtrField<::VariableMessage>& _internal_variables() const;
  ::google::protobuf::RepeatedPtrField<::VariableMessage>* _internal_mutable_variables();
  public:
  const ::VariableMessage& variables(int index) const;
  ::VariableMessage* add_variables();
  const ::google::protobuf::RepeatedPtrField< ::VariableMessage >&
      variables() const;
  // repeated .TriggerMessage triggers = 7;
  int triggers_size() const;
  private:
  int _internal_triggers_size() const;

  public:
  void clear_triggers() ;
  ::TriggerMessage* mutable_triggers(int index);
  ::google::protobuf::RepeatedPtrField< ::TriggerMessage >*
      mutable_triggers();
  private:
  const ::google::protobuf::RepeatedPtrField<::TriggerMessage>& _internal_triggers() const;
  ::google::protobuf::RepeatedPtrField<::TriggerMessage>* _internal_mutable_triggers();
  public:
  const ::TriggerMessage& triggers(int index) const;
  ::TriggerMessage* add_triggers();
  const ::google::protobuf::RepeatedPtrField< ::TriggerMessage >&
      triggers() const;
  // optional string error_message = 3;
  bool has_error_message() const;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // optional string message = 4;
  bool has_message() const;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // optional .VariableMessage variable = 5;
  bool has_variable() const;
  void clear_variable() ;
  const ::VariableMessage& variable() const;
  PROTOBUF_NODISCARD ::VariableMessage* release_variable();
  ::VariableMessage* mutable_variable();
  void set_allocated_variable(::VariableMessage* value);
  void unsafe_arena_set_allocated_variable(::VariableMessage* value);
  ::VariableMessage* unsafe_arena_release_variable();

  private:
  const ::VariableMessage& _internal_variable() const;
  ::VariableMessage* _internal_mutable_variable();

  public:
  // uint64 command_id = 1;
  void clear_command_id() ;
  ::uint64_t command_id() const;
  void set_command_id(::uint64_t value);

  private:
  ::uint64_t _internal_command_id() const;
  void _internal_set_command_id(::uint64_t value);

  public:
  // bool success = 2;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ResponseMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 3,
      44, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::VariableMessage > variables_;
    ::google::protobuf::RepeatedPtrField< ::TriggerMessage > triggers_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::VariableMessage* variable_;
    ::uint64_t command_id_;
    bool success_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_property_2eproto;
};// -------------------------------------------------------------------

class CommandMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CommandMessage) */ {
 public:
  inline CommandMessage() : CommandMessage(nullptr) {}
  ~CommandMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CommandMessage(::google::protobuf::internal::ConstantInitialized);

  inline CommandMessage(const CommandMessage& from)
      : CommandMessage(nullptr, from) {}
  CommandMessage(CommandMessage&& from) noexcept
    : CommandMessage() {
    *this = ::std::move(from);
  }

  inline CommandMessage& operator=(const CommandMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMessage& operator=(CommandMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMessage* internal_default_instance() {
    return reinterpret_cast<const CommandMessage*>(
               &_CommandMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandMessage& a, CommandMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommandMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CommandMessage& from) {
    CommandMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CommandMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CommandMessage";
  }
  protected:
  explicit CommandMessage(::google::protobuf::Arena* arena);
  CommandMessage(::google::protobuf::Arena* arena, const CommandMessage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using CommandType = CommandMessage_CommandType;
  static constexpr CommandType GET_VARIABLE = CommandMessage_CommandType_GET_VARIABLE;
  static constexpr CommandType SET_VARIABLE = CommandMessage_CommandType_SET_VARIABLE;
  static constexpr CommandType GET_ALL_VARIABLES = CommandMessage_CommandType_GET_ALL_VARIABLES;
  static constexpr CommandType GET_ALL_TRIGGERS = CommandMessage_CommandType_GET_ALL_TRIGGERS;
  static constexpr CommandType EXECUTE_TRIGGER = CommandMessage_CommandType_EXECUTE_TRIGGER;
  static inline bool CommandType_IsValid(int value) {
    return CommandMessage_CommandType_IsValid(value);
  }
  static constexpr CommandType CommandType_MIN = CommandMessage_CommandType_CommandType_MIN;
  static constexpr CommandType CommandType_MAX = CommandMessage_CommandType_CommandType_MAX;
  static constexpr int CommandType_ARRAYSIZE = CommandMessage_CommandType_CommandType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* CommandType_descriptor() {
    return CommandMessage_CommandType_descriptor();
  }
  template <typename T>
  static inline const std::string& CommandType_Name(T value) {
    return CommandMessage_CommandType_Name(value);
  }
  static inline bool CommandType_Parse(absl::string_view name, CommandType* value) {
    return CommandMessage_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVariableNameFieldNumber = 3,
    kVariableFieldNumber = 4,
    kTriggerFieldNumber = 5,
    kCommandIdFieldNumber = 1,
    kCommandTypeFieldNumber = 2,
  };
  // optional string variable_name = 3;
  bool has_variable_name() const;
  void clear_variable_name() ;
  const std::string& variable_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_variable_name(Arg_&& arg, Args_... args);
  std::string* mutable_variable_name();
  PROTOBUF_NODISCARD std::string* release_variable_name();
  void set_allocated_variable_name(std::string* value);

  private:
  const std::string& _internal_variable_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_variable_name(
      const std::string& value);
  std::string* _internal_mutable_variable_name();

  public:
  // optional .VariableMessage variable = 4;
  bool has_variable() const;
  void clear_variable() ;
  const ::VariableMessage& variable() const;
  PROTOBUF_NODISCARD ::VariableMessage* release_variable();
  ::VariableMessage* mutable_variable();
  void set_allocated_variable(::VariableMessage* value);
  void unsafe_arena_set_allocated_variable(::VariableMessage* value);
  ::VariableMessage* unsafe_arena_release_variable();

  private:
  const ::VariableMessage& _internal_variable() const;
  ::VariableMessage* _internal_mutable_variable();

  public:
  // optional .TriggerMessage trigger = 5;
  bool has_trigger() const;
  void clear_trigger() ;
  const ::TriggerMessage& trigger() const;
  PROTOBUF_NODISCARD ::TriggerMessage* release_trigger();
  ::TriggerMessage* mutable_trigger();
  void set_allocated_trigger(::TriggerMessage* value);
  void unsafe_arena_set_allocated_trigger(::TriggerMessage* value);
  ::TriggerMessage* unsafe_arena_release_trigger();

  private:
  const ::TriggerMessage& _internal_trigger() const;
  ::TriggerMessage* _internal_mutable_trigger();

  public:
  // uint64 command_id = 1;
  void clear_command_id() ;
  ::uint64_t command_id() const;
  void set_command_id(::uint64_t value);

  private:
  ::uint64_t _internal_command_id() const;
  void _internal_set_command_id(::uint64_t value);

  public:
  // .CommandMessage.CommandType command_type = 2;
  void clear_command_type() ;
  ::CommandMessage_CommandType command_type() const;
  void set_command_type(::CommandMessage_CommandType value);

  private:
  ::CommandMessage_CommandType _internal_command_type() const;
  void _internal_set_command_type(::CommandMessage_CommandType value);

  public:
  // @@protoc_insertion_point(class_scope:CommandMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      36, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr variable_name_;
    ::VariableMessage* variable_;
    ::TriggerMessage* trigger_;
    ::uint64_t command_id_;
    int command_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_property_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TriggerMessage

// string name = 1;
inline void TriggerMessage::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TriggerMessage::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TriggerMessage.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TriggerMessage::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TriggerMessage.name)
}
inline std::string* TriggerMessage::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TriggerMessage.name)
  return _s;
}
inline const std::string& TriggerMessage::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void TriggerMessage::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* TriggerMessage::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* TriggerMessage::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:TriggerMessage.name)
  return _impl_.name_.Release();
}
inline void TriggerMessage::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TriggerMessage.name)
}

// -------------------------------------------------------------------

// VariableMessage

// string name = 1;
inline void VariableMessage::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& VariableMessage::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:VariableMessage.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VariableMessage::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:VariableMessage.name)
}
inline std::string* VariableMessage::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:VariableMessage.name)
  return _s;
}
inline const std::string& VariableMessage::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void VariableMessage::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* VariableMessage::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* VariableMessage::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:VariableMessage.name)
  return _impl_.name_.Release();
}
inline void VariableMessage::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:VariableMessage.name)
}

// string string_value = 3;
inline bool VariableMessage::has_string_value() const {
  return value_case() == kStringValue;
}
inline void VariableMessage::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void VariableMessage::clear_string_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() == kStringValue) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& VariableMessage::string_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:VariableMessage.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VariableMessage::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:VariableMessage.string_value)
}
inline std::string* VariableMessage::mutable_string_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:VariableMessage.string_value)
  return _s;
}
inline const std::string& VariableMessage::_internal_string_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (value_case() != kStringValue) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.string_value_.Get();
}
inline void VariableMessage::_internal_set_string_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArena());
}
inline std::string* VariableMessage::_internal_mutable_string_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable( GetArena());
}
inline std::string* VariableMessage::release_string_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:VariableMessage.string_value)
  if (value_case() != kStringValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.string_value_.Release();
}
inline void VariableMessage::set_allocated_string_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:VariableMessage.string_value)
}

// double numeric_value = 4;
inline bool VariableMessage::has_numeric_value() const {
  return value_case() == kNumericValue;
}
inline void VariableMessage::set_has_numeric_value() {
  _impl_._oneof_case_[0] = kNumericValue;
}
inline void VariableMessage::clear_numeric_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() == kNumericValue) {
    _impl_.value_.numeric_value_ = 0;
    clear_has_value();
  }
}
inline double VariableMessage::numeric_value() const {
  // @@protoc_insertion_point(field_get:VariableMessage.numeric_value)
  return _internal_numeric_value();
}
inline void VariableMessage::set_numeric_value(double value) {
  _internal_set_numeric_value(value);
  // @@protoc_insertion_point(field_set:VariableMessage.numeric_value)
}
inline double VariableMessage::_internal_numeric_value() const {
  if (value_case() == kNumericValue) {
    return _impl_.value_.numeric_value_;
  }
  return 0;
}
inline void VariableMessage::_internal_set_numeric_value(double value) {
  if (value_case() != kNumericValue) {
    clear_value();
    set_has_numeric_value();
  }
  _impl_.value_.numeric_value_ = value;
}

// bool bool_value = 5;
inline bool VariableMessage::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void VariableMessage::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void VariableMessage::clear_bool_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_case() == kBoolValue) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool VariableMessage::bool_value() const {
  // @@protoc_insertion_point(field_get:VariableMessage.bool_value)
  return _internal_bool_value();
}
inline void VariableMessage::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:VariableMessage.bool_value)
}
inline bool VariableMessage::_internal_bool_value() const {
  if (value_case() == kBoolValue) {
    return _impl_.value_.bool_value_;
  }
  return false;
}
inline void VariableMessage::_internal_set_bool_value(bool value) {
  if (value_case() != kBoolValue) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
}

// bool read_only = 6;
inline void VariableMessage::clear_read_only() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.read_only_ = false;
}
inline bool VariableMessage::read_only() const {
  // @@protoc_insertion_point(field_get:VariableMessage.read_only)
  return _internal_read_only();
}
inline void VariableMessage::set_read_only(bool value) {
  _internal_set_read_only(value);
  // @@protoc_insertion_point(field_set:VariableMessage.read_only)
}
inline bool VariableMessage::_internal_read_only() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.read_only_;
}
inline void VariableMessage::_internal_set_read_only(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.read_only_ = value;
}

inline bool VariableMessage::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void VariableMessage::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline VariableMessage::ValueCase VariableMessage::value_case() const {
  return VariableMessage::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CommandMessage

// uint64 command_id = 1;
inline void CommandMessage::clear_command_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.command_id_ = ::uint64_t{0u};
}
inline ::uint64_t CommandMessage::command_id() const {
  // @@protoc_insertion_point(field_get:CommandMessage.command_id)
  return _internal_command_id();
}
inline void CommandMessage::set_command_id(::uint64_t value) {
  _internal_set_command_id(value);
  // @@protoc_insertion_point(field_set:CommandMessage.command_id)
}
inline ::uint64_t CommandMessage::_internal_command_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.command_id_;
}
inline void CommandMessage::_internal_set_command_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.command_id_ = value;
}

// .CommandMessage.CommandType command_type = 2;
inline void CommandMessage::clear_command_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.command_type_ = 0;
}
inline ::CommandMessage_CommandType CommandMessage::command_type() const {
  // @@protoc_insertion_point(field_get:CommandMessage.command_type)
  return _internal_command_type();
}
inline void CommandMessage::set_command_type(::CommandMessage_CommandType value) {
  _internal_set_command_type(value);
  // @@protoc_insertion_point(field_set:CommandMessage.command_type)
}
inline ::CommandMessage_CommandType CommandMessage::_internal_command_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::CommandMessage_CommandType>(_impl_.command_type_);
}
inline void CommandMessage::_internal_set_command_type(::CommandMessage_CommandType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.command_type_ = value;
}

// optional string variable_name = 3;
inline bool CommandMessage::has_variable_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CommandMessage::clear_variable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.variable_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandMessage::variable_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CommandMessage.variable_name)
  return _internal_variable_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommandMessage::set_variable_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.variable_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CommandMessage.variable_name)
}
inline std::string* CommandMessage::mutable_variable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_variable_name();
  // @@protoc_insertion_point(field_mutable:CommandMessage.variable_name)
  return _s;
}
inline const std::string& CommandMessage::_internal_variable_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variable_name_.Get();
}
inline void CommandMessage::_internal_set_variable_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.variable_name_.Set(value, GetArena());
}
inline std::string* CommandMessage::_internal_mutable_variable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.variable_name_.Mutable( GetArena());
}
inline std::string* CommandMessage::release_variable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommandMessage.variable_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.variable_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.variable_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CommandMessage::set_allocated_variable_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.variable_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.variable_name_.IsDefault()) {
          _impl_.variable_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommandMessage.variable_name)
}

// optional .VariableMessage variable = 4;
inline bool CommandMessage::has_variable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.variable_ != nullptr);
  return value;
}
inline void CommandMessage::clear_variable() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.variable_ != nullptr) _impl_.variable_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::VariableMessage& CommandMessage::_internal_variable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::VariableMessage* p = _impl_.variable_;
  return p != nullptr ? *p : reinterpret_cast<const ::VariableMessage&>(::_VariableMessage_default_instance_);
}
inline const ::VariableMessage& CommandMessage::variable() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CommandMessage.variable)
  return _internal_variable();
}
inline void CommandMessage::unsafe_arena_set_allocated_variable(::VariableMessage* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.variable_);
  }
  _impl_.variable_ = reinterpret_cast<::VariableMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommandMessage.variable)
}
inline ::VariableMessage* CommandMessage::release_variable() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::VariableMessage* released = _impl_.variable_;
  _impl_.variable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::VariableMessage* CommandMessage::unsafe_arena_release_variable() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommandMessage.variable)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::VariableMessage* temp = _impl_.variable_;
  _impl_.variable_ = nullptr;
  return temp;
}
inline ::VariableMessage* CommandMessage::_internal_mutable_variable() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.variable_ == nullptr) {
    auto* p = CreateMaybeMessage<::VariableMessage>(GetArena());
    _impl_.variable_ = reinterpret_cast<::VariableMessage*>(p);
  }
  return _impl_.variable_;
}
inline ::VariableMessage* CommandMessage::mutable_variable() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::VariableMessage* _msg = _internal_mutable_variable();
  // @@protoc_insertion_point(field_mutable:CommandMessage.variable)
  return _msg;
}
inline void CommandMessage::set_allocated_variable(::VariableMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::VariableMessage*>(_impl_.variable_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::VariableMessage*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.variable_ = reinterpret_cast<::VariableMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:CommandMessage.variable)
}

// optional .TriggerMessage trigger = 5;
inline bool CommandMessage::has_trigger() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trigger_ != nullptr);
  return value;
}
inline void CommandMessage::clear_trigger() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.trigger_ != nullptr) _impl_.trigger_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TriggerMessage& CommandMessage::_internal_trigger() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::TriggerMessage* p = _impl_.trigger_;
  return p != nullptr ? *p : reinterpret_cast<const ::TriggerMessage&>(::_TriggerMessage_default_instance_);
}
inline const ::TriggerMessage& CommandMessage::trigger() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CommandMessage.trigger)
  return _internal_trigger();
}
inline void CommandMessage::unsafe_arena_set_allocated_trigger(::TriggerMessage* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.trigger_);
  }
  _impl_.trigger_ = reinterpret_cast<::TriggerMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CommandMessage.trigger)
}
inline ::TriggerMessage* CommandMessage::release_trigger() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TriggerMessage* released = _impl_.trigger_;
  _impl_.trigger_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::TriggerMessage* CommandMessage::unsafe_arena_release_trigger() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CommandMessage.trigger)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TriggerMessage* temp = _impl_.trigger_;
  _impl_.trigger_ = nullptr;
  return temp;
}
inline ::TriggerMessage* CommandMessage::_internal_mutable_trigger() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.trigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::TriggerMessage>(GetArena());
    _impl_.trigger_ = reinterpret_cast<::TriggerMessage*>(p);
  }
  return _impl_.trigger_;
}
inline ::TriggerMessage* CommandMessage::mutable_trigger() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::TriggerMessage* _msg = _internal_mutable_trigger();
  // @@protoc_insertion_point(field_mutable:CommandMessage.trigger)
  return _msg;
}
inline void CommandMessage::set_allocated_trigger(::TriggerMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::TriggerMessage*>(_impl_.trigger_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::TriggerMessage*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.trigger_ = reinterpret_cast<::TriggerMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:CommandMessage.trigger)
}

// -------------------------------------------------------------------

// ResponseMessage

// uint64 command_id = 1;
inline void ResponseMessage::clear_command_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.command_id_ = ::uint64_t{0u};
}
inline ::uint64_t ResponseMessage::command_id() const {
  // @@protoc_insertion_point(field_get:ResponseMessage.command_id)
  return _internal_command_id();
}
inline void ResponseMessage::set_command_id(::uint64_t value) {
  _internal_set_command_id(value);
  // @@protoc_insertion_point(field_set:ResponseMessage.command_id)
}
inline ::uint64_t ResponseMessage::_internal_command_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.command_id_;
}
inline void ResponseMessage::_internal_set_command_id(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.command_id_ = value;
}

// bool success = 2;
inline void ResponseMessage::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool ResponseMessage::success() const {
  // @@protoc_insertion_point(field_get:ResponseMessage.success)
  return _internal_success();
}
inline void ResponseMessage::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ResponseMessage.success)
}
inline bool ResponseMessage::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void ResponseMessage::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// optional string error_message = 3;
inline bool ResponseMessage::has_error_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ResponseMessage::clear_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResponseMessage::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ResponseMessage.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseMessage::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ResponseMessage.error_message)
}
inline std::string* ResponseMessage::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:ResponseMessage.error_message)
  return _s;
}
inline const std::string& ResponseMessage::_internal_error_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_message_.Get();
}
inline void ResponseMessage::_internal_set_error_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* ResponseMessage::_internal_mutable_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* ResponseMessage::release_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ResponseMessage.error_message)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.error_message_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ResponseMessage::set_allocated_error_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_message_.IsDefault()) {
          _impl_.error_message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResponseMessage.error_message)
}

// optional string message = 4;
inline bool ResponseMessage::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ResponseMessage::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResponseMessage::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ResponseMessage.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ResponseMessage::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ResponseMessage.message)
}
inline std::string* ResponseMessage::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ResponseMessage.message)
  return _s;
}
inline const std::string& ResponseMessage::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void ResponseMessage::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* ResponseMessage::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* ResponseMessage::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ResponseMessage.message)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.message_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ResponseMessage::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ResponseMessage.message)
}

// optional .VariableMessage variable = 5;
inline bool ResponseMessage::has_variable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.variable_ != nullptr);
  return value;
}
inline void ResponseMessage::clear_variable() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.variable_ != nullptr) _impl_.variable_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::VariableMessage& ResponseMessage::_internal_variable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::VariableMessage* p = _impl_.variable_;
  return p != nullptr ? *p : reinterpret_cast<const ::VariableMessage&>(::_VariableMessage_default_instance_);
}
inline const ::VariableMessage& ResponseMessage::variable() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ResponseMessage.variable)
  return _internal_variable();
}
inline void ResponseMessage::unsafe_arena_set_allocated_variable(::VariableMessage* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.variable_);
  }
  _impl_.variable_ = reinterpret_cast<::VariableMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ResponseMessage.variable)
}
inline ::VariableMessage* ResponseMessage::release_variable() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::VariableMessage* released = _impl_.variable_;
  _impl_.variable_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::VariableMessage* ResponseMessage::unsafe_arena_release_variable() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ResponseMessage.variable)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::VariableMessage* temp = _impl_.variable_;
  _impl_.variable_ = nullptr;
  return temp;
}
inline ::VariableMessage* ResponseMessage::_internal_mutable_variable() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.variable_ == nullptr) {
    auto* p = CreateMaybeMessage<::VariableMessage>(GetArena());
    _impl_.variable_ = reinterpret_cast<::VariableMessage*>(p);
  }
  return _impl_.variable_;
}
inline ::VariableMessage* ResponseMessage::mutable_variable() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::VariableMessage* _msg = _internal_mutable_variable();
  // @@protoc_insertion_point(field_mutable:ResponseMessage.variable)
  return _msg;
}
inline void ResponseMessage::set_allocated_variable(::VariableMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::VariableMessage*>(_impl_.variable_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::VariableMessage*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.variable_ = reinterpret_cast<::VariableMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:ResponseMessage.variable)
}

// repeated .VariableMessage variables = 6;
inline int ResponseMessage::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int ResponseMessage::variables_size() const {
  return _internal_variables_size();
}
inline void ResponseMessage::clear_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.variables_.Clear();
}
inline ::VariableMessage* ResponseMessage::mutable_variables(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ResponseMessage.variables)
  return _internal_mutable_variables()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::VariableMessage>* ResponseMessage::mutable_variables()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ResponseMessage.variables)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_variables();
}
inline const ::VariableMessage& ResponseMessage::variables(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ResponseMessage.variables)
  return _internal_variables().Get(index);
}
inline ::VariableMessage* ResponseMessage::add_variables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::VariableMessage* _add = _internal_mutable_variables()->Add();
  // @@protoc_insertion_point(field_add:ResponseMessage.variables)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::VariableMessage>& ResponseMessage::variables() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ResponseMessage.variables)
  return _internal_variables();
}
inline const ::google::protobuf::RepeatedPtrField<::VariableMessage>&
ResponseMessage::_internal_variables() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variables_;
}
inline ::google::protobuf::RepeatedPtrField<::VariableMessage>*
ResponseMessage::_internal_mutable_variables() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.variables_;
}

// repeated .TriggerMessage triggers = 7;
inline int ResponseMessage::_internal_triggers_size() const {
  return _internal_triggers().size();
}
inline int ResponseMessage::triggers_size() const {
  return _internal_triggers_size();
}
inline void ResponseMessage::clear_triggers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.triggers_.Clear();
}
inline ::TriggerMessage* ResponseMessage::mutable_triggers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ResponseMessage.triggers)
  return _internal_mutable_triggers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::TriggerMessage>* ResponseMessage::mutable_triggers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ResponseMessage.triggers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_triggers();
}
inline const ::TriggerMessage& ResponseMessage::triggers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ResponseMessage.triggers)
  return _internal_triggers().Get(index);
}
inline ::TriggerMessage* ResponseMessage::add_triggers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::TriggerMessage* _add = _internal_mutable_triggers()->Add();
  // @@protoc_insertion_point(field_add:ResponseMessage.triggers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::TriggerMessage>& ResponseMessage::triggers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ResponseMessage.triggers)
  return _internal_triggers();
}
inline const ::google::protobuf::RepeatedPtrField<::TriggerMessage>&
ResponseMessage::_internal_triggers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.triggers_;
}
inline ::google::protobuf::RepeatedPtrField<::TriggerMessage>*
ResponseMessage::_internal_mutable_triggers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.triggers_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::CommandMessage_CommandType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::CommandMessage_CommandType>() {
  return ::CommandMessage_CommandType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_property_2eproto_2epb_2eh
