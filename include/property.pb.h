// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: property.proto

#ifndef PROTOBUF_INCLUDED_property_2eproto
#define PROTOBUF_INCLUDED_property_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_property_2eproto 

namespace protobuf_property_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_property_2eproto
class CommandMessage;
class CommandMessageDefaultTypeInternal;
extern CommandMessageDefaultTypeInternal _CommandMessage_default_instance_;
class ResponseMessage;
class ResponseMessageDefaultTypeInternal;
extern ResponseMessageDefaultTypeInternal _ResponseMessage_default_instance_;
class TriggerMessage;
class TriggerMessageDefaultTypeInternal;
extern TriggerMessageDefaultTypeInternal _TriggerMessage_default_instance_;
class VariableMessage;
class VariableMessageDefaultTypeInternal;
extern VariableMessageDefaultTypeInternal _VariableMessage_default_instance_;
namespace google {
namespace protobuf {
template<> ::CommandMessage* Arena::CreateMaybeMessage<::CommandMessage>(Arena*);
template<> ::ResponseMessage* Arena::CreateMaybeMessage<::ResponseMessage>(Arena*);
template<> ::TriggerMessage* Arena::CreateMaybeMessage<::TriggerMessage>(Arena*);
template<> ::VariableMessage* Arena::CreateMaybeMessage<::VariableMessage>(Arena*);
}  // namespace protobuf
}  // namespace google

enum CommandMessage_CommandType {
  CommandMessage_CommandType_GET_VARIABLE = 0,
  CommandMessage_CommandType_SET_VARIABLE = 1,
  CommandMessage_CommandType_GET_ALL_VARIABLES = 2,
  CommandMessage_CommandType_GET_ALL_TRIGGERS = 3,
  CommandMessage_CommandType_EXECUTE_TRIGGER = 4,
  CommandMessage_CommandType_CommandMessage_CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommandMessage_CommandType_CommandMessage_CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommandMessage_CommandType_IsValid(int value);
const CommandMessage_CommandType CommandMessage_CommandType_CommandType_MIN = CommandMessage_CommandType_GET_VARIABLE;
const CommandMessage_CommandType CommandMessage_CommandType_CommandType_MAX = CommandMessage_CommandType_EXECUTE_TRIGGER;
const int CommandMessage_CommandType_CommandType_ARRAYSIZE = CommandMessage_CommandType_CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommandMessage_CommandType_descriptor();
inline const ::std::string& CommandMessage_CommandType_Name(CommandMessage_CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommandMessage_CommandType_descriptor(), value);
}
inline bool CommandMessage_CommandType_Parse(
    const ::std::string& name, CommandMessage_CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandMessage_CommandType>(
    CommandMessage_CommandType_descriptor(), name, value);
}
// ===================================================================

class TriggerMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TriggerMessage) */ {
 public:
  TriggerMessage();
  virtual ~TriggerMessage();

  TriggerMessage(const TriggerMessage& from);

  inline TriggerMessage& operator=(const TriggerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TriggerMessage(TriggerMessage&& from) noexcept
    : TriggerMessage() {
    *this = ::std::move(from);
  }

  inline TriggerMessage& operator=(TriggerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TriggerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TriggerMessage* internal_default_instance() {
    return reinterpret_cast<const TriggerMessage*>(
               &_TriggerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TriggerMessage* other);
  friend void swap(TriggerMessage& a, TriggerMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TriggerMessage* New() const final {
    return CreateMaybeMessage<TriggerMessage>(NULL);
  }

  TriggerMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TriggerMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TriggerMessage& from);
  void MergeFrom(const TriggerMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TriggerMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:TriggerMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_property_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VariableMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VariableMessage) */ {
 public:
  VariableMessage();
  virtual ~VariableMessage();

  VariableMessage(const VariableMessage& from);

  inline VariableMessage& operator=(const VariableMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VariableMessage(VariableMessage&& from) noexcept
    : VariableMessage() {
    *this = ::std::move(from);
  }

  inline VariableMessage& operator=(VariableMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VariableMessage& default_instance();

  enum ValueCase {
    kStringValue = 3,
    kNumericValue = 4,
    kBoolValue = 5,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VariableMessage* internal_default_instance() {
    return reinterpret_cast<const VariableMessage*>(
               &_VariableMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VariableMessage* other);
  friend void swap(VariableMessage& a, VariableMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VariableMessage* New() const final {
    return CreateMaybeMessage<VariableMessage>(NULL);
  }

  VariableMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VariableMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VariableMessage& from);
  void MergeFrom(const VariableMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bool read_only = 6;
  void clear_read_only();
  static const int kReadOnlyFieldNumber = 6;
  bool read_only() const;
  void set_read_only(bool value);

  // string string_value = 3;
  private:
  bool has_string_value() const;
  public:
  void clear_string_value();
  static const int kStringValueFieldNumber = 3;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  // double numeric_value = 4;
  private:
  bool has_numeric_value() const;
  public:
  void clear_numeric_value();
  static const int kNumericValueFieldNumber = 4;
  double numeric_value() const;
  void set_numeric_value(double value);

  // bool bool_value = 5;
  private:
  bool has_bool_value() const;
  public:
  void clear_bool_value();
  static const int kBoolValueFieldNumber = 5;
  bool bool_value() const;
  void set_bool_value(bool value);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:VariableMessage)
 private:
  void set_has_string_value();
  void set_has_numeric_value();
  void set_has_bool_value();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  bool read_only_;
  union ValueUnion {
    ValueUnion() {}
    ::google::protobuf::internal::ArenaStringPtr string_value_;
    double numeric_value_;
    bool bool_value_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_property_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommandMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CommandMessage) */ {
 public:
  CommandMessage();
  virtual ~CommandMessage();

  CommandMessage(const CommandMessage& from);

  inline CommandMessage& operator=(const CommandMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommandMessage(CommandMessage&& from) noexcept
    : CommandMessage() {
    *this = ::std::move(from);
  }

  inline CommandMessage& operator=(CommandMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandMessage* internal_default_instance() {
    return reinterpret_cast<const CommandMessage*>(
               &_CommandMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CommandMessage* other);
  friend void swap(CommandMessage& a, CommandMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommandMessage* New() const final {
    return CreateMaybeMessage<CommandMessage>(NULL);
  }

  CommandMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommandMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommandMessage& from);
  void MergeFrom(const CommandMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandMessage_CommandType CommandType;
  static const CommandType GET_VARIABLE =
    CommandMessage_CommandType_GET_VARIABLE;
  static const CommandType SET_VARIABLE =
    CommandMessage_CommandType_SET_VARIABLE;
  static const CommandType GET_ALL_VARIABLES =
    CommandMessage_CommandType_GET_ALL_VARIABLES;
  static const CommandType GET_ALL_TRIGGERS =
    CommandMessage_CommandType_GET_ALL_TRIGGERS;
  static const CommandType EXECUTE_TRIGGER =
    CommandMessage_CommandType_EXECUTE_TRIGGER;
  static inline bool CommandType_IsValid(int value) {
    return CommandMessage_CommandType_IsValid(value);
  }
  static const CommandType CommandType_MIN =
    CommandMessage_CommandType_CommandType_MIN;
  static const CommandType CommandType_MAX =
    CommandMessage_CommandType_CommandType_MAX;
  static const int CommandType_ARRAYSIZE =
    CommandMessage_CommandType_CommandType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CommandType_descriptor() {
    return CommandMessage_CommandType_descriptor();
  }
  static inline const ::std::string& CommandType_Name(CommandType value) {
    return CommandMessage_CommandType_Name(value);
  }
  static inline bool CommandType_Parse(const ::std::string& name,
      CommandType* value) {
    return CommandMessage_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string variable_name = 3;
  void clear_variable_name();
  static const int kVariableNameFieldNumber = 3;
  const ::std::string& variable_name() const;
  void set_variable_name(const ::std::string& value);
  #if LANG_CXX11
  void set_variable_name(::std::string&& value);
  #endif
  void set_variable_name(const char* value);
  void set_variable_name(const char* value, size_t size);
  ::std::string* mutable_variable_name();
  ::std::string* release_variable_name();
  void set_allocated_variable_name(::std::string* variable_name);

  // .VariableMessage variable = 4;
  bool has_variable() const;
  void clear_variable();
  static const int kVariableFieldNumber = 4;
  private:
  const ::VariableMessage& _internal_variable() const;
  public:
  const ::VariableMessage& variable() const;
  ::VariableMessage* release_variable();
  ::VariableMessage* mutable_variable();
  void set_allocated_variable(::VariableMessage* variable);

  // .TriggerMessage trigger = 5;
  bool has_trigger() const;
  void clear_trigger();
  static const int kTriggerFieldNumber = 5;
  private:
  const ::TriggerMessage& _internal_trigger() const;
  public:
  const ::TriggerMessage& trigger() const;
  ::TriggerMessage* release_trigger();
  ::TriggerMessage* mutable_trigger();
  void set_allocated_trigger(::TriggerMessage* trigger);

  // uint64 command_id = 1;
  void clear_command_id();
  static const int kCommandIdFieldNumber = 1;
  ::google::protobuf::uint64 command_id() const;
  void set_command_id(::google::protobuf::uint64 value);

  // .CommandMessage.CommandType command_type = 2;
  void clear_command_type();
  static const int kCommandTypeFieldNumber = 2;
  ::CommandMessage_CommandType command_type() const;
  void set_command_type(::CommandMessage_CommandType value);

  // @@protoc_insertion_point(class_scope:CommandMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr variable_name_;
  ::VariableMessage* variable_;
  ::TriggerMessage* trigger_;
  ::google::protobuf::uint64 command_id_;
  int command_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_property_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResponseMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResponseMessage) */ {
 public:
  ResponseMessage();
  virtual ~ResponseMessage();

  ResponseMessage(const ResponseMessage& from);

  inline ResponseMessage& operator=(const ResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseMessage(ResponseMessage&& from) noexcept
    : ResponseMessage() {
    *this = ::std::move(from);
  }

  inline ResponseMessage& operator=(ResponseMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseMessage* internal_default_instance() {
    return reinterpret_cast<const ResponseMessage*>(
               &_ResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ResponseMessage* other);
  friend void swap(ResponseMessage& a, ResponseMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseMessage* New() const final {
    return CreateMaybeMessage<ResponseMessage>(NULL);
  }

  ResponseMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResponseMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResponseMessage& from);
  void MergeFrom(const ResponseMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VariableMessage variables = 6;
  int variables_size() const;
  void clear_variables();
  static const int kVariablesFieldNumber = 6;
  ::VariableMessage* mutable_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::VariableMessage >*
      mutable_variables();
  const ::VariableMessage& variables(int index) const;
  ::VariableMessage* add_variables();
  const ::google::protobuf::RepeatedPtrField< ::VariableMessage >&
      variables() const;

  // repeated .TriggerMessage triggers = 7;
  int triggers_size() const;
  void clear_triggers();
  static const int kTriggersFieldNumber = 7;
  ::TriggerMessage* mutable_triggers(int index);
  ::google::protobuf::RepeatedPtrField< ::TriggerMessage >*
      mutable_triggers();
  const ::TriggerMessage& triggers(int index) const;
  ::TriggerMessage* add_triggers();
  const ::google::protobuf::RepeatedPtrField< ::TriggerMessage >&
      triggers() const;

  // string error_message = 3;
  void clear_error_message();
  static const int kErrorMessageFieldNumber = 3;
  const ::std::string& error_message() const;
  void set_error_message(const ::std::string& value);
  #if LANG_CXX11
  void set_error_message(::std::string&& value);
  #endif
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  ::std::string* mutable_error_message();
  ::std::string* release_error_message();
  void set_allocated_error_message(::std::string* error_message);

  // string message = 4;
  void clear_message();
  static const int kMessageFieldNumber = 4;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .VariableMessage variable = 5;
  bool has_variable() const;
  void clear_variable();
  static const int kVariableFieldNumber = 5;
  private:
  const ::VariableMessage& _internal_variable() const;
  public:
  const ::VariableMessage& variable() const;
  ::VariableMessage* release_variable();
  ::VariableMessage* mutable_variable();
  void set_allocated_variable(::VariableMessage* variable);

  // uint64 command_id = 1;
  void clear_command_id();
  static const int kCommandIdFieldNumber = 1;
  ::google::protobuf::uint64 command_id() const;
  void set_command_id(::google::protobuf::uint64 value);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:ResponseMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::VariableMessage > variables_;
  ::google::protobuf::RepeatedPtrField< ::TriggerMessage > triggers_;
  ::google::protobuf::internal::ArenaStringPtr error_message_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::VariableMessage* variable_;
  ::google::protobuf::uint64 command_id_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_property_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TriggerMessage

// string name = 1;
inline void TriggerMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TriggerMessage::name() const {
  // @@protoc_insertion_point(field_get:TriggerMessage.name)
  return name_.GetNoArena();
}
inline void TriggerMessage::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TriggerMessage.name)
}
#if LANG_CXX11
inline void TriggerMessage::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TriggerMessage.name)
}
#endif
inline void TriggerMessage::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TriggerMessage.name)
}
inline void TriggerMessage::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TriggerMessage.name)
}
inline ::std::string* TriggerMessage::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TriggerMessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TriggerMessage::release_name() {
  // @@protoc_insertion_point(field_release:TriggerMessage.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TriggerMessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TriggerMessage.name)
}

// -------------------------------------------------------------------

// VariableMessage

// string name = 1;
inline void VariableMessage::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VariableMessage::name() const {
  // @@protoc_insertion_point(field_get:VariableMessage.name)
  return name_.GetNoArena();
}
inline void VariableMessage::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VariableMessage.name)
}
#if LANG_CXX11
inline void VariableMessage::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VariableMessage.name)
}
#endif
inline void VariableMessage::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VariableMessage.name)
}
inline void VariableMessage::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VariableMessage.name)
}
inline ::std::string* VariableMessage::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:VariableMessage.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VariableMessage::release_name() {
  // @@protoc_insertion_point(field_release:VariableMessage.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VariableMessage::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:VariableMessage.name)
}

// string string_value = 3;
inline bool VariableMessage::has_string_value() const {
  return value_case() == kStringValue;
}
inline void VariableMessage::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void VariableMessage::clear_string_value() {
  if (has_string_value()) {
    value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& VariableMessage::string_value() const {
  // @@protoc_insertion_point(field_get:VariableMessage.string_value)
  if (has_string_value()) {
    return value_.string_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void VariableMessage::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:VariableMessage.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VariableMessage.string_value)
}
#if LANG_CXX11
inline void VariableMessage::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:VariableMessage.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VariableMessage.string_value)
}
#endif
inline void VariableMessage::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VariableMessage.string_value)
}
inline void VariableMessage::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VariableMessage.string_value)
}
inline ::std::string* VariableMessage::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:VariableMessage.string_value)
  return value_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VariableMessage::release_string_value() {
  // @@protoc_insertion_point(field_release:VariableMessage.string_value)
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void VariableMessage::set_allocated_string_value(::std::string* string_value) {
  if (!has_string_value()) {
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string_value != NULL) {
    set_has_string_value();
    value_.string_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:VariableMessage.string_value)
}

// double numeric_value = 4;
inline bool VariableMessage::has_numeric_value() const {
  return value_case() == kNumericValue;
}
inline void VariableMessage::set_has_numeric_value() {
  _oneof_case_[0] = kNumericValue;
}
inline void VariableMessage::clear_numeric_value() {
  if (has_numeric_value()) {
    value_.numeric_value_ = 0;
    clear_has_value();
  }
}
inline double VariableMessage::numeric_value() const {
  // @@protoc_insertion_point(field_get:VariableMessage.numeric_value)
  if (has_numeric_value()) {
    return value_.numeric_value_;
  }
  return 0;
}
inline void VariableMessage::set_numeric_value(double value) {
  if (!has_numeric_value()) {
    clear_value();
    set_has_numeric_value();
  }
  value_.numeric_value_ = value;
  // @@protoc_insertion_point(field_set:VariableMessage.numeric_value)
}

// bool bool_value = 5;
inline bool VariableMessage::has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void VariableMessage::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void VariableMessage::clear_bool_value() {
  if (has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool VariableMessage::bool_value() const {
  // @@protoc_insertion_point(field_get:VariableMessage.bool_value)
  if (has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void VariableMessage::set_bool_value(bool value) {
  if (!has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
  // @@protoc_insertion_point(field_set:VariableMessage.bool_value)
}

// bool read_only = 6;
inline void VariableMessage::clear_read_only() {
  read_only_ = false;
}
inline bool VariableMessage::read_only() const {
  // @@protoc_insertion_point(field_get:VariableMessage.read_only)
  return read_only_;
}
inline void VariableMessage::set_read_only(bool value) {
  
  read_only_ = value;
  // @@protoc_insertion_point(field_set:VariableMessage.read_only)
}

inline bool VariableMessage::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void VariableMessage::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline VariableMessage::ValueCase VariableMessage::value_case() const {
  return VariableMessage::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CommandMessage

// uint64 command_id = 1;
inline void CommandMessage::clear_command_id() {
  command_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CommandMessage::command_id() const {
  // @@protoc_insertion_point(field_get:CommandMessage.command_id)
  return command_id_;
}
inline void CommandMessage::set_command_id(::google::protobuf::uint64 value) {
  
  command_id_ = value;
  // @@protoc_insertion_point(field_set:CommandMessage.command_id)
}

// .CommandMessage.CommandType command_type = 2;
inline void CommandMessage::clear_command_type() {
  command_type_ = 0;
}
inline ::CommandMessage_CommandType CommandMessage::command_type() const {
  // @@protoc_insertion_point(field_get:CommandMessage.command_type)
  return static_cast< ::CommandMessage_CommandType >(command_type_);
}
inline void CommandMessage::set_command_type(::CommandMessage_CommandType value) {
  
  command_type_ = value;
  // @@protoc_insertion_point(field_set:CommandMessage.command_type)
}

// string variable_name = 3;
inline void CommandMessage::clear_variable_name() {
  variable_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommandMessage::variable_name() const {
  // @@protoc_insertion_point(field_get:CommandMessage.variable_name)
  return variable_name_.GetNoArena();
}
inline void CommandMessage::set_variable_name(const ::std::string& value) {
  
  variable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommandMessage.variable_name)
}
#if LANG_CXX11
inline void CommandMessage::set_variable_name(::std::string&& value) {
  
  variable_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommandMessage.variable_name)
}
#endif
inline void CommandMessage::set_variable_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  variable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommandMessage.variable_name)
}
inline void CommandMessage::set_variable_name(const char* value, size_t size) {
  
  variable_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommandMessage.variable_name)
}
inline ::std::string* CommandMessage::mutable_variable_name() {
  
  // @@protoc_insertion_point(field_mutable:CommandMessage.variable_name)
  return variable_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommandMessage::release_variable_name() {
  // @@protoc_insertion_point(field_release:CommandMessage.variable_name)
  
  return variable_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommandMessage::set_allocated_variable_name(::std::string* variable_name) {
  if (variable_name != NULL) {
    
  } else {
    
  }
  variable_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variable_name);
  // @@protoc_insertion_point(field_set_allocated:CommandMessage.variable_name)
}

// .VariableMessage variable = 4;
inline bool CommandMessage::has_variable() const {
  return this != internal_default_instance() && variable_ != NULL;
}
inline void CommandMessage::clear_variable() {
  if (GetArenaNoVirtual() == NULL && variable_ != NULL) {
    delete variable_;
  }
  variable_ = NULL;
}
inline const ::VariableMessage& CommandMessage::_internal_variable() const {
  return *variable_;
}
inline const ::VariableMessage& CommandMessage::variable() const {
  const ::VariableMessage* p = variable_;
  // @@protoc_insertion_point(field_get:CommandMessage.variable)
  return p != NULL ? *p : *reinterpret_cast<const ::VariableMessage*>(
      &::_VariableMessage_default_instance_);
}
inline ::VariableMessage* CommandMessage::release_variable() {
  // @@protoc_insertion_point(field_release:CommandMessage.variable)
  
  ::VariableMessage* temp = variable_;
  variable_ = NULL;
  return temp;
}
inline ::VariableMessage* CommandMessage::mutable_variable() {
  
  if (variable_ == NULL) {
    auto* p = CreateMaybeMessage<::VariableMessage>(GetArenaNoVirtual());
    variable_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CommandMessage.variable)
  return variable_;
}
inline void CommandMessage::set_allocated_variable(::VariableMessage* variable) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete variable_;
  }
  if (variable) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      variable = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, variable, submessage_arena);
    }
    
  } else {
    
  }
  variable_ = variable;
  // @@protoc_insertion_point(field_set_allocated:CommandMessage.variable)
}

// .TriggerMessage trigger = 5;
inline bool CommandMessage::has_trigger() const {
  return this != internal_default_instance() && trigger_ != NULL;
}
inline void CommandMessage::clear_trigger() {
  if (GetArenaNoVirtual() == NULL && trigger_ != NULL) {
    delete trigger_;
  }
  trigger_ = NULL;
}
inline const ::TriggerMessage& CommandMessage::_internal_trigger() const {
  return *trigger_;
}
inline const ::TriggerMessage& CommandMessage::trigger() const {
  const ::TriggerMessage* p = trigger_;
  // @@protoc_insertion_point(field_get:CommandMessage.trigger)
  return p != NULL ? *p : *reinterpret_cast<const ::TriggerMessage*>(
      &::_TriggerMessage_default_instance_);
}
inline ::TriggerMessage* CommandMessage::release_trigger() {
  // @@protoc_insertion_point(field_release:CommandMessage.trigger)
  
  ::TriggerMessage* temp = trigger_;
  trigger_ = NULL;
  return temp;
}
inline ::TriggerMessage* CommandMessage::mutable_trigger() {
  
  if (trigger_ == NULL) {
    auto* p = CreateMaybeMessage<::TriggerMessage>(GetArenaNoVirtual());
    trigger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CommandMessage.trigger)
  return trigger_;
}
inline void CommandMessage::set_allocated_trigger(::TriggerMessage* trigger) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete trigger_;
  }
  if (trigger) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trigger = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trigger, submessage_arena);
    }
    
  } else {
    
  }
  trigger_ = trigger;
  // @@protoc_insertion_point(field_set_allocated:CommandMessage.trigger)
}

// -------------------------------------------------------------------

// ResponseMessage

// uint64 command_id = 1;
inline void ResponseMessage::clear_command_id() {
  command_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ResponseMessage::command_id() const {
  // @@protoc_insertion_point(field_get:ResponseMessage.command_id)
  return command_id_;
}
inline void ResponseMessage::set_command_id(::google::protobuf::uint64 value) {
  
  command_id_ = value;
  // @@protoc_insertion_point(field_set:ResponseMessage.command_id)
}

// bool success = 2;
inline void ResponseMessage::clear_success() {
  success_ = false;
}
inline bool ResponseMessage::success() const {
  // @@protoc_insertion_point(field_get:ResponseMessage.success)
  return success_;
}
inline void ResponseMessage::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:ResponseMessage.success)
}

// string error_message = 3;
inline void ResponseMessage::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseMessage::error_message() const {
  // @@protoc_insertion_point(field_get:ResponseMessage.error_message)
  return error_message_.GetNoArena();
}
inline void ResponseMessage::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ResponseMessage.error_message)
}
#if LANG_CXX11
inline void ResponseMessage::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ResponseMessage.error_message)
}
#endif
inline void ResponseMessage::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ResponseMessage.error_message)
}
inline void ResponseMessage::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ResponseMessage.error_message)
}
inline ::std::string* ResponseMessage::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:ResponseMessage.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseMessage::release_error_message() {
  // @@protoc_insertion_point(field_release:ResponseMessage.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseMessage::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:ResponseMessage.error_message)
}

// string message = 4;
inline void ResponseMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseMessage::message() const {
  // @@protoc_insertion_point(field_get:ResponseMessage.message)
  return message_.GetNoArena();
}
inline void ResponseMessage::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ResponseMessage.message)
}
#if LANG_CXX11
inline void ResponseMessage::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ResponseMessage.message)
}
#endif
inline void ResponseMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ResponseMessage.message)
}
inline void ResponseMessage::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ResponseMessage.message)
}
inline ::std::string* ResponseMessage::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ResponseMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseMessage::release_message() {
  // @@protoc_insertion_point(field_release:ResponseMessage.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ResponseMessage.message)
}

// .VariableMessage variable = 5;
inline bool ResponseMessage::has_variable() const {
  return this != internal_default_instance() && variable_ != NULL;
}
inline void ResponseMessage::clear_variable() {
  if (GetArenaNoVirtual() == NULL && variable_ != NULL) {
    delete variable_;
  }
  variable_ = NULL;
}
inline const ::VariableMessage& ResponseMessage::_internal_variable() const {
  return *variable_;
}
inline const ::VariableMessage& ResponseMessage::variable() const {
  const ::VariableMessage* p = variable_;
  // @@protoc_insertion_point(field_get:ResponseMessage.variable)
  return p != NULL ? *p : *reinterpret_cast<const ::VariableMessage*>(
      &::_VariableMessage_default_instance_);
}
inline ::VariableMessage* ResponseMessage::release_variable() {
  // @@protoc_insertion_point(field_release:ResponseMessage.variable)
  
  ::VariableMessage* temp = variable_;
  variable_ = NULL;
  return temp;
}
inline ::VariableMessage* ResponseMessage::mutable_variable() {
  
  if (variable_ == NULL) {
    auto* p = CreateMaybeMessage<::VariableMessage>(GetArenaNoVirtual());
    variable_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ResponseMessage.variable)
  return variable_;
}
inline void ResponseMessage::set_allocated_variable(::VariableMessage* variable) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete variable_;
  }
  if (variable) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      variable = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, variable, submessage_arena);
    }
    
  } else {
    
  }
  variable_ = variable;
  // @@protoc_insertion_point(field_set_allocated:ResponseMessage.variable)
}

// repeated .VariableMessage variables = 6;
inline int ResponseMessage::variables_size() const {
  return variables_.size();
}
inline void ResponseMessage::clear_variables() {
  variables_.Clear();
}
inline ::VariableMessage* ResponseMessage::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:ResponseMessage.variables)
  return variables_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::VariableMessage >*
ResponseMessage::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:ResponseMessage.variables)
  return &variables_;
}
inline const ::VariableMessage& ResponseMessage::variables(int index) const {
  // @@protoc_insertion_point(field_get:ResponseMessage.variables)
  return variables_.Get(index);
}
inline ::VariableMessage* ResponseMessage::add_variables() {
  // @@protoc_insertion_point(field_add:ResponseMessage.variables)
  return variables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VariableMessage >&
ResponseMessage::variables() const {
  // @@protoc_insertion_point(field_list:ResponseMessage.variables)
  return variables_;
}

// repeated .TriggerMessage triggers = 7;
inline int ResponseMessage::triggers_size() const {
  return triggers_.size();
}
inline void ResponseMessage::clear_triggers() {
  triggers_.Clear();
}
inline ::TriggerMessage* ResponseMessage::mutable_triggers(int index) {
  // @@protoc_insertion_point(field_mutable:ResponseMessage.triggers)
  return triggers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TriggerMessage >*
ResponseMessage::mutable_triggers() {
  // @@protoc_insertion_point(field_mutable_list:ResponseMessage.triggers)
  return &triggers_;
}
inline const ::TriggerMessage& ResponseMessage::triggers(int index) const {
  // @@protoc_insertion_point(field_get:ResponseMessage.triggers)
  return triggers_.Get(index);
}
inline ::TriggerMessage* ResponseMessage::add_triggers() {
  // @@protoc_insertion_point(field_add:ResponseMessage.triggers)
  return triggers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TriggerMessage >&
ResponseMessage::triggers() const {
  // @@protoc_insertion_point(field_list:ResponseMessage.triggers)
  return triggers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CommandMessage_CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommandMessage_CommandType>() {
  return ::CommandMessage_CommandType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_property_2eproto
